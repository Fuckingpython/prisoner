import random

cooperate(opp_hist=None, self_hist=None, opp_func=None) = True
defect(opp_hist=None, self_hist=None, opp_func=None) = False

def coin_flip(opp_hist=None, self_hist=None, opp_func=None):
    return bool(random.getrandbits(1))

def tit_for_tat(opp_hist, self_hist=None, opp_func=None):
    if not opp_hist:
        return cooperate()
    else:
        return opp_hist[-1]

def nice_switcher(opp_hist, self_hist, opp_func=None):
    if not opp_hist or not self_hist:
        return cooperate()
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()

def mean_switcher(opp_hist, self_hist, opp_func=None):
    if not opp_hist or not self_hist:
        return defect()
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()

def punisher(opp_hist, self_hist, opp_func):
    return opp_func(opp_hist, self_hist, cooperate)

def mirror_or_tft(opp_hist, self_hist, opp_func):
    try:
        return opp_func(opp_hist, self_hist, mirror_or_tft)
    except RuntimeError:
        return tit_for_tat(opp_hist, self_hist, opp_func)

def simulate_or_tft(opp_hist, self_hist, opp_func):
    try:
        opp_move = opp_func(opp_hist, self_hist, simulate_or_tft)
        if opp_func(opp_hist+[False], self_hist+[opp_move], simulate_or_tft):
            return False
        elif opp_func(opp_hist+[True], self_hist+[opp_move], simulate_or_tft):
            return True
        else:
            return False
    except RuntimeError:
        return tit_for_tat(opp_hist, self_hist, opp_func)
