# IMPORTS:

import itertools
import signal
import random

# DEFAULTS:

default_payoffs = (
                  (2,2), (0,3),
                  (3,0), (1,1)
                  )

around(n) = int(random.gauss(n, n/10))
default_rounds = around(100)

# BOT CONSTRUCTOR:

class pd_bot(object):
    default = False

    def __init__(self, *funcs):
        self.funcs = funcs |> tuple

    def copy(self):
        out = pd_bot(*self.funcs)
        out.default = self.default
        return out

    def __iadd__(self, other):
        if isinstance(other, pd_bot):
            self.funcs += other.funcs
            return self
        else:
            raise TypeError("pd_bot objects can only be added to other pd_bot objects, not "+repr(other))

    def __add__(self, other):
        out = self.copy()
        out += other
        return out

    def __call__(self, self_hist, opp_hist, opp_bot, time=None):
        for func in self.funcs:
            if time is None:
                result = func(list(self_hist), list(opp_hist), opp_bot)
            else:
                result = time_limit(func$(list(self_hist), list(opp_hist), opp_bot), None, time)
            if result is not None:
                return result |> bool
        return self.default

# GAME UTILITIES:

def time_limit(func, default, time):
    class TimeOut(Exception):
        pass
    def timeout(*args, **kwargs):
        raise TimeOut()
    try:
        signal.SIGALRM
    except AttributeError:
        raise OSError("system does not support signal.SIGALRM")
    else:
        signal.signal(signal.SIGALRM, timeout)
    signal.alarm(time)
    try:
        result = func()
    except (TimeOut, RuntimeError):
        return default
    else:
        return result
    finally:
        signal.alarm(0)

def bot_call(a, a_hist, b, b_hist, time=None):
    if isinstance(a, pd_bot) and isinstance(b, pd_bot):
        return a(list(a_hist), list(b_hist), b, time) |> bool
    else:
        raise TypeError("bots must be pd_bot objects, not "+repr(a)+" and "+repr(b))

def moves(a, b, a_hist, b_hist, time=None):
    return (bot_call(a, a_hist, b, b_hist, time),
            bot_call(b, b_hist, a, a_hist, time))

def game(a, b, a_hist=None, b_hist=None, time=None, debug=0):
    if a_hist is None:
        a_hist = []
    else:
        a_hist = list(a_hist)
    if b_hist is None:
        b_hist = []
    else:
        b_hist = list(b_hist)
    while True:
        a_c, b_c = moves(a, b, a_hist, b_hist, time)
        a_hist.append(a_c)
        b_hist.append(b_c)
        if debug > 0:
            print("    "+str(a_c)+" "*(a_c+1)+str(b_c))
        yield a_c, b_c

def score_move(a_c, b_c, payoffs=default_payoffs):
    if a_c and b_c:
        return payoffs[0]
    elif a_c:
        return payoffs[1]
    elif b_c:
        return payoffs[2]
    else:
        return payoffs[3]

def score_game(moveiter, payoffs=default_payoffs):
    a_score = 0
    b_score = 0
    for a_c, b_c in moveiter:
        a_change, b_change = score_move(a_c, b_c, payoffs)
        a_score += a_change
        b_score += b_change
        yield (a_score, b_score)

def tally(a, b, a_hist=None, b_hist=None, time=None, payoffs=default_payoffs, debug=0):
    return game(a, b, a_hist, b_hist, time, debug) |> score_game$(payoffs=payoffs)

def round_robin(participants, time=None, rounds=default_rounds, payoffs=default_payoffs, debug=0):
    if rounds > 0:
        scores = {}
        for participant in participants:
            scores[participant] = 0
        for a,b in itertools.permutations(participants.keys(), 2):
            if debug > 0:
                print("\n\n-- "+a+" vs. "+b+" --")
            a_score, b_score = tally(participants[a], participants[b], time=time, payoffs=payoffs, debug=debug-1)$[rounds-1]
            scores[a] += a_score
            scores[b] += b_score
            if debug > 0:
                print("    "+a+": "+str(a_score))
                print("    "+b+": "+str(b_score))
        return scores
    else:
        raise ValueError("rounds must be > 0")

def score_sort(scores):
    return scores.items() |> sorted$(key=itemgetter(1))

def tournament(participants, time=None, rounds=default_rounds, payoffs=default_payoffs, debug=0):
    if debug > 0:
        count = 0
    while len(participants) > 1:
        if not isinstance(rounds, int):
            rounds = rounds()
        if debug > 0:
            count += 1
            print("\n\n\n==== ROUND "+str(count)+" ====")
        scores = round_robin(participants, time, rounds, payoffs, debug-1)
        yield scores
        participants = participants.copy()
        lowest = None
        for name, score in scores |> score_sort:
            if lowest is None:
                lowest = score
            if score == lowest:
                del participants[name]

def score_repr(scores):
    out = ["{"]
    for name, score in scores |> score_sort |> reversed:
        out.append("    "+name+": "+str(score))
    out.append("}")
    return "\n".join(out)

def winners(participants, limit=None, time=None, rounds=default_rounds, payoffs=default_payoffs, debug=0):
    count = 0
    for scores in tournament(participants, time, rounds, payoffs, debug-1):
        count += 1
        if debug > 0:
            print("\n\nROUND "+str(count)+" RESULTS:\n"+score_repr(scores))
        if limit is not None and count >= limit:
            break
    return scores.keys() |> list

# BOT UTILITIES:

def simulate(self_bot, self_hist, opp_bot, opp_hist, self_move=None, opp_move=None):
    if opp_move is None:
        opp_move = opp_bot(opp_hist, self_hist, self_bot)
    if self_move is None:
        return (simulate(self_bot, self_hist, opp_bot, opp_hist, True, opp_move),
                simulate(self_bot, self_hist, opp_bot, opp_hist, False, opp_move))
    else:
        return ((self_move, opp_move,),) :: game(self_bot, opp_bot, self_hist+[self_move], opp_hist+[opp_move], None)

def winnings(self_bot, self_hist, opp_bot, opp_hist, self_move=None, payoffs=default_payoffs):
    simulation = simulate(self_bot, self_hist, opp_bot, opp_hist, self_move)
    if self_move is None:
        return (score_game(simulation[0], payoffs=payoffs),
                score_game(simulation[1], payoffs=payoffs))
    else:
        return score_game(simulation, payoffs=payoffs)

def decide(c_scores, d_scores):
    if c_scores[0] > d_scores[0]:
        return True
    elif d_scores[0] > c_scores[0]:
        return False
    elif c_scores[1] < d_scores[1]:
        return True
    elif d_scores[1] < c_scores[1]:
        return False
    else:
        return None
