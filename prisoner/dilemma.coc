import itertools
import signal

def time_limit(func, default, time):
    class TimeOut(Exception):
        pass
    def timeout():
        raise TimeOut()
    try:
        signal.SIGALRM
    except AttributeError:
        raise OSError("system does not support signal.SIGALRM")
    else:
        signal.signal(signal.SIGALRM, timeout)
    signal.alarm(time)
    try:
        result = func()
    except (TimeOut, RuntimeError):
        returned = False
    else:
        returned = True
    finally:
        signal.alarm(0)
    if returned:
        return result
    else:
        return default

default_move = False

def call(a, a_hist, b, b_hist, time=None):
    for func in a:
        if time is None:
            result = func(b_hist, a_hist, b)
        else:
            result = time_limit(func$(b_hist, a_hist, b), None, time)
        if result is not None:
            return result
    return default_move

def moves(a, b, a_hist, b_hist, time=None):
    return (call(a, a_hist, b, b_hist, time),
            call(b, b_hist, a, a_hist, time))

def game(a, b, a_hist=None, b_hist=None, time=None):
    if a_hist is None:
        a_hist = []
    else:
        a_hist = list(a_hist)
    if b_hist is None:
        b_hist = []
    else:
        b_hist = list(b_hist)
    while True:
        a_c, b_c = moves(a, b, tuple(a_hist), tuple(b_hist), time)
        a_hist.append(a_c)
        b_hist.append(b_c)
        yield a_c, b_c

min_payoffs = (
              (2,2), (0,3),
              (3,0), (1,1)
              )

def score(a_c, b_c, payoffs=min_payoffs):
    if a_c and b_c:
        return payoffs[0]
    elif a_c:
        return payoffs[1]
    elif b_c:
        return payoffs[2]
    else:
        return payoffs[3]

def tally(a, b, a_hist=None, b_hist=None, time=None, payoffs=min_payoffs):
    a_score = 0
    b_score = 0
    for a_c, b_c in game(a, b, a_hist, b_hist, time):
        a_change, b_change = score(a_c, b_c, payoffs)
        a_score += a_change
        b_score += b_change
        yield (a_score, b_score)

def predict(self_func, opp_hist, self_hist, opp_bot):
    opp_move = opp_bot(opp_hist, self_hist, self_func)
    return (opp_bot(opp_hist+(True,), self_hist+[opp_move], self_func),
            opp_bot(opp_hist+(False,), self_hist+[opp_move], self_func))

def simulate(rounds, self_func, opp_hist, self_hist, opp_bot):
    opp_move = opp_bot(opp_hist, self_hist, self_func)
    return (tally(self_func, opp_bot, self_hist+(True,), opp_hist+[opp_move], None)$[rounds],
            tally(self_func, opp_bot, self_hist+(False,), opp_hist+[opp_move], None)$[rounds])

def round_robin(rounds, participants, time=None, payoffs=min_payoffs, verbose=False):
    scores = {}
    for participant in participants:
        scores[participant] = 0
    for a,b in itertools.permutations(participants.keys(), 2):
        if verbose:
            print(repr(a)+" vs. "+repr(b))
        a_score, b_score = tally(participants[a], participants[b], time=time, payoffs=payoffs)$[rounds]
        if verbose:
            print("["+str(a_score)+"] ["+str(b_score)+"]")
        scores[a] += a_score
        scores[b] += b_score
    return scores
