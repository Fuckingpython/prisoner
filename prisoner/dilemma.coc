# IMPORTS:

import itertools
import threading
import random

# DEFAULTS:

default_payoffs = (
                  (1,1), (-1,2),
                  (2,-1), (0,0)
                  )
default_rounds = 100

COOPERATE = True
DEFECT = False
DEFER = None

# BOT CONSTRUCTOR:

class pd_bot(object):
    _calls = 0
    _failures = 1
    _cooperates = 2
    _defers = 3
    _passes = 4
    _scores = 5
    _score = 6
    default = False

    def __init__(self, *funcs, **kwargs):
        self.funcs = funcs |> tuple
        self.state = kwargs
        self.fought = []
        self.stats = [0, # calls
                      0, # failures
                      0, # cooperates
                      0, # defers
                      0, # passes
                      0, # scores
                      0] # score

    def copy(self, **kwargs):
        out = pd_bot(*self.funcs, **kwargs)
        out.stats = self.stats
        if self.state == out.state:
            out.fought = self.fought
        return out

    def __eq__(self, other):
        return self.funcs == other.funcs and self.state == other.state

    def fail_prob(self):
        return self.stats[self._failures] / self.stats[self._calls]

    def coop_prob(self):
        return self.stats[self._cooperates] / (self.stats[self._calls] - self.stats[self._failures])

    def defer_prob(self):
        return self.stats[self._defers] / (self.stats[self._calls] - self.stats[self._failures])

    def ave_passes(self):
        return self.stats[self._passes] / (self.stats[self._calls] - self.stats[self._failures])

    def ave_score(self):
        return self.stats[self._score] / self.stats[self._scores]

    def main_call_prob(self):
        return self.stats[self._scores] / self.stats[self._calls]

    def calls(self):
        return self.stats[self._calls]

    def score(self, n):
        self.stats[self._score] += n
        self.stats[self._scores] += 1

    def __iadd__(self, other):
        if isinstance(other, pd_bot):
            self.funcs += other.funcs
            return self
        else:
            raise TypeError("pd_bot objects can only be added to other pd_bot objects, not "+repr(other))

    def __add__(self, other):
        out = pd_bot(*self.funcs)
        out += other
        return out

    def __call__(self, self_hist, opp_hist, opp_bot, time=None):
        self.stats[self._calls] += 1
        if opp_bot in self.fought:
            self.stats[self._failures] += 1
            raise RuntimeError("recursive call detected")
        for func in self.funcs:
            self.fought.append(opp_bot)
            try:
                if time is None:
                    result = func(list(self_hist), list(opp_hist), opp_bot, **self.state)
                else:
                    result = time_limit(func$(list(self_hist), list(opp_hist), opp_bot, **self.state), None, time)
            finally:
                self.fought.remove(opp_bot)
            if result is DEFER:
                self.stats[self._passes] += 1
            else:
                result |>= bool
                if result:
                    self.stats[self._cooperates] += 1
                return result
        self.stats[self._defers] += 1
        return self.default

# GAME UTILITIES:

def time_limit(func, default, time):
    class storage:
        result = default
        def run(self):
            try:
                self.result = func()
            except RuntimeError:
                pass
    store = storage()
    runner = threading.Thread(target=store.run)
    runner.start()
    runner.join(time)
    if runner.isAlive():
        print("Warning: execution timed out for "+repr(func))
        raise RuntimeError("execution timed out for "+repr(func))
    return store.result

def bot_call(a, a_hist, b, b_hist, time=None):
    if isinstance(a, pd_bot) and isinstance(b, pd_bot):
        return a(list(a_hist), list(b_hist), b, time) |> bool
    else:
        raise TypeError("bots must be pd_bot objects, not "+repr(a)+" and "+repr(b))

def moves(a, b, a_hist, b_hist, time=None):
    return (bot_call(a, a_hist, b, b_hist, time),
            bot_call(b, b_hist, a, a_hist, time))

def game(a, b, a_hist=None, b_hist=None, time=None, debug=0):
    if a_hist is None:
        a_hist = []
    else:
        a_hist = list(a_hist)
    if b_hist is None:
        b_hist = []
    else:
        b_hist = list(b_hist)
    while True:
        a_c, b_c = moves(a, b, a_hist, b_hist, time)
        a_score, b_score = score_move(a_c, b_c)
        a.score(a_score)
        b.score(b_score)
        a_hist.append(a_c)
        b_hist.append(b_c)
        if debug > 2:
            print("    "+str(a_c)+" "*(a_c+1)+str(b_c))
        yield a_c, b_c

def score_move(a_c, b_c, payoffs=default_payoffs):
    if a_c and b_c:
        return payoffs[0]
    elif a_c:
        return payoffs[1]
    elif b_c:
        return payoffs[2]
    else:
        return payoffs[3]

def score_game(moveiter, payoffs=default_payoffs, scalar=1):
    a_score = 0
    b_score = 0
    scale = scalar
    for a_c, b_c in moveiter:
        a_change, b_change = map((*)$(scale), score_move(a_c, b_c, payoffs))
        a_score += a_change
        b_score += b_change
        yield (a_score, b_score)
        scale *= scalar

def tally(a, b, a_hist=None, b_hist=None, time=None, payoffs=default_payoffs, debug=0):
    return game(a, b, a_hist, b_hist, time, debug) |> score_game$(payoffs=payoffs)

def advance(moveiter, n=1):
    for i in range(n):
        next(moveiter)
    return moveiter

def until_about(moveiter, rounds=default_rounds, deterministic=True):
    if deterministic:
        return rounds, moveiter$[rounds - 1]
    else:
        return dropwhile((_) -> random.random() > 1/rounds, moveiter |> enumerate |> advance) |> next

def fight(contestant, opponent, time=None, rounds=default_rounds, payoffs=default_payoffs, deterministic=True, debug=0):
    n, (con_score, opp_score) = tally(contestant, opponent, time=time, payoffs=payoffs, debug=debug) |> until_about$(rounds=rounds, deterministic=deterministic)
    if debug > 1:
        print("    contestant: "+str(con_score))
        print("    opponent: "+str(opp_score))
        print("    (rounds: "+str(n)+")")
    return n, con_score, opp_score

def battle(contestant, opponents, time=None, rounds=default_rounds, payoffs=default_payoffs, deterministic=True, debug=0):
    if rounds > 0:
        cum_n = 0
        cum_con_score = 0
        cum_opp_score = 0
        for name, opp in opponents.items():
            if debug > 1:
                print("\n-- contestant vs. "+name+" --")
            n, con_score, opp_score = fight(contestant, opp, time, rounds, payoffs, deterministic, debug)
            cum_n += n
            cum_con_score += con_score
            cum_opp_score += opp_score
        if debug > 0:
            print("\n\n==== FINAL SCORES ====")
            print("    contestant: "+str(cum_con_score))
            print("    opponents: "+str(cum_opp_score))
            print("    (rounds: "+str(cum_n)+")")
        return cum_con_score/cum_n, cum_opp_score/cum_n
    else:
        raise ValueError("rounds must be > 0")

def round_robin(participants, time=None, rounds=default_rounds, payoffs=default_payoffs, deterministic=True, debug=0):
    if rounds > 0:
        scores = {}
        for participant in participants:
            scores[participant] = [0, 0] # [score, n]
        for a,b in itertools.combinations(participants.keys(), 2):
            if debug > 1:
                print("\n-- "+a+" vs. "+b+" --")
            n, (a_score, b_score) = tally(participants[a], participants[b], time=time, payoffs=payoffs, debug=debug) |> until_about$(rounds=rounds, deterministic=deterministic)
            scores[a][0] += a_score
            scores[a][1] += n
            scores[b][0] += b_score
            scores[b][1] += n
            if debug > 1:
                print("    "+a+": "+str(a_score))
                print("    "+b+": "+str(b_score))
                print("    (rounds: "+str(n)+")")
        return scores
    else:
        raise ValueError("rounds must be > 0")

def score_sort(scores):
    return scores.items() |> map$((kv)->(kv[0], kv[1][0]/kv[1][1])) |> sorted$(key=(kv)->kv[1])

def tournament(participants, time=None, rounds=default_rounds, payoffs=default_payoffs, deterministic=True, debug=0):
    if debug > 0:
        count = 0
    while len(participants) > 1:
        if debug > 0:
            count += 1
            print("\n\n==== ROUND "+str(count)+" ====")
        scores = round_robin(participants, time, rounds, payoffs, deterministic, debug)
        yield scores
        participants = participants.copy()
        lowest = None
        for name, score in scores |> score_sort:
            if lowest is None:
                lowest = score
            if score == lowest:
                del participants[name]

def score_repr(scores):
    out = "{\n"
    for name, score in scores |> score_sort |> reversed:
        out += "    " + name + ": " + str(score) + "\n"
    out += "}"
    return out

def stat_sort(participants):
    return participants.items() |> sorted$(key=(kv)->kv[1].ave_score())

def botstats(participants):
    out = "{"
    for name, bot in participants |> stat_sort |> reversed:
        out += """
    """+name+":" + (" (Warning: defer_prob = "+str(bot.defer_prob())+")" if bot.defer_prob() else "") + """
        ave_score = """+str(bot.ave_score())+"""
        coop_prob = """+str(bot.coop_prob())+"""
        fail_prob = """+str(bot.fail_prob())+"""
        ave_passes = """+str(bot.ave_passes())+"""
        calls = """+str(bot.calls())+"""
        main_call_prob = """+str(bot.main_call_prob())+"""
"""
    out += "}"
    return out

def winners(participants, limit=None, time=None, rounds=default_rounds, payoffs=default_payoffs, deterministic=True, debug=0):
    count = 0
    for scores in tournament(participants, time, rounds, payoffs, deterministic, debug):
        count += 1
        if debug > 0:
            print("\nROUND "+str(count)+" RESULTS:\n"+score_repr(scores))
        if limit is not None and count >= limit:
            break
    return scores.keys() |> list

# BOT UTILITIES:

def playthrough(self_bot, self_hist, opp_hist, opp_bot, self_move, opp_move=None):
    opp_move = opp_bot(opp_hist, self_hist, self_bot)
    results = (| (self_move, opp_move) |) :: game(self_bot, opp_bot, self_hist+[self_move], opp_hist+[opp_move])
    return results

def simulation(self_bot, self_hist, opp_hist, opp_bot):
    opp_move = opp_bot(opp_hist, self_hist, self_bot)
    results = (playthrough(self_bot, self_hist, opp_hist, opp_bot, COOPERATE, opp_move),
        playthrough(self_bot, self_hist, opp_hist, opp_bot, DEFECT, opp_move))
    return results

def winnings(self_bot, self_hist, opp_hist, opp_bot, payoffs=default_payoffs, scalar=1 - 1/default_rounds):
    simulated = simulation(self_bot, self_hist, opp_hist, opp_bot)
    return (score_game(simulated[0], payoffs, scalar),
            score_game(simulated[1], payoffs, scalar))

def decide(c_scores, d_scores):
    if c_scores[0] > d_scores[0]:
        return COOPERATE
    elif d_scores[0] > c_scores[0]:
        return DEFECT
    elif c_scores[1] < d_scores[1]:
        return COOPERATE
    elif d_scores[1] < c_scores[1]:
        return DEFECT
    else:
        return COOPERATE
