# IMPORTS:

from .dilemma import COOPERATE, DEFECT, DEFER, random, pd_bot, playthrough, simulation, winnings, decide

# BOTS:

def cooperate(self_hist=None, opp_hist=None, opp_bot=None):
    return COOPERATE
cooperate_bot = pd_bot(cooperate)

def defect(self_hist=None, opp_hist=None, opp_bot=None):
    return DEFECT
defect_bot = pd_bot(defect)

def coin_flip(self_hist=None, opp_hist=None, opp_bot=None):
    return random.getrandbits(1) |> bool
coin_flip_bot = pd_bot(coin_flip)

def tit_for_tat(self_hist, opp_hist, opp_bot=None):
    if opp_hist:
        return opp_hist[-1]
    else:
        return DEFER
tit_for_tat_bot = pd_bot(tit_for_tat) + cooperate_bot

def nice_tft(self_hist, opp_hist, opp_bot=None):
    if not opp_hist or opp_hist[-1] or random.random() < .05:
        return COOPERATE
    else:
        return DEFECT
nice_tft_bot = pd_bot(nice_tft)

def delayed_tft(self_hist, opp_hist, opp_bot=None):
    if opp_hist:
        return random.choice(opp_hist)
    else:
        return DEFER
delayed_tft_bot = pd_bot(delayed_tft) + cooperate_bot

def punisher(self_hist, opp_hist, opp_bot=None):
    if opp_hist and not all(opp_hist):
        return DEFECT
    else:
        return DEFER
punisher_bot = pd_bot(punisher) + cooperate_bot

def switcher(self_hist, opp_hist, opp_bot=None):
    if not opp_hist or not self_hist:
        return DEFER
    elif self_hist[-1] == opp_hist[-1]:
        return COOPERATE
    else:
        return DEFECT
mean_switcher_bot = pd_bot(switcher) + defect_bot
nice_switcher_bot = pd_bot(switcher) + cooperate_bot

def exploiter(self_hist, opp_hist, opp_bot):
    if playthrough(defect_bot, self_hist, opp_hist, opp_bot, False)$[1][1]:
        return DEFECT
    else:
        return DEFER
exploit_or_tft_bot = pd_bot(exploiter) + tit_for_tat_bot
exploit_or_switch_bot = pd_bot(exploiter) + nice_switcher_bot
exploit_or_punish_bot = pd_bot(exploiter) + punisher_bot
exploit_or_nice_tft_bot = pd_bot(exploiter) + nice_tft_bot
exploit_or_delayed_tft_bot = pd_bot(exploiter) + delayed_tft_bot

def mirror(self_bot, self_hist, opp_hist, opp_bot):
    return opp_bot(opp_hist, self_hist, self_bot)

def mirror_or_cooperate(self_hist, opp_hist, opp_bot):
    return mirror(mirror_bot, self_hist, opp_hist, opp_bot)
mirror_bot = pd_bot(mirror_or_cooperate) + cooperate_bot

justice_mirror = mirror$(cooperate_bot)
justice_mirror_bot = pd_bot(justice_mirror)

def mirror_or_tft(self_hist, opp_hist, opp_bot):
    return mirror(mirror_or_tft_bot, self_hist, opp_hist, opp_bot)
mirror_or_tft_bot = pd_bot(mirror_or_tft) + tit_for_tat_bot
exploit_or_mirror_bot = pd_bot(exploiter) + mirror_or_tft_bot

def mirror_or_exploit(self_hist, opp_hist, opp_bot):
    return mirror(mirror_or_exploit_bot, self_hist, opp_hist, opp_bot)
mirror_or_exploit_bot = pd_bot(mirror_or_exploit) + exploit_or_tft_bot

def tft_or_mirror(self_hist, opp_hist, opp_bot):
    return mirror(tft_or_mirror_bot, self_hist, opp_hist, opp_bot)
tft_or_mirror_bot = pd_bot(tit_for_tat) + pd_bot(tft_or_mirror) + cooperate_bot

def switch_or_mirror(self_hist, opp_hist, opp_bot):
    return mirror(switch_or_mirror_bot, self_hist, opp_hist, opp_bot)
switch_or_mirror_bot = pd_bot(switcher) + pd_bot(switch_or_mirror) + cooperate_bot

def punish_or_mirror(self_hist, opp_hist, opp_bot):
    return mirror(punish_or_mirror_bot, self_hist, opp_hist, opp_bot)
punish_or_mirror_bot = pd_bot(punisher) + pd_bot(punish_or_mirror) + cooperate_bot

def nice_tft_or_mirror(self_hist, opp_hist, opp_bot):
    return mirror(nice_tft_or_mirror_bot, self_hist, opp_hist, opp_bot)
nice_tft_or_mirror_bot = pd_bot(nice_tft) + pd_bot(nice_tft_or_mirror) + cooperate_bot

def delayed_tft_or_mirror(self_hist, opp_hist, opp_bot):
    return mirror(delayed_tft_or_mirror_bot, self_hist, opp_hist, opp_bot)
delayed_tft_or_mirror_bot = pd_bot(delayed_tft) + pd_bot(delayed_tft_or_mirror) + cooperate_bot

def lookahead_or_tft(self_hist, opp_hist, opp_bot):
    c_response, d_response = simulation(tit_for_tat_bot, self_hist, opp_hist, opp_bot)
    if d_response$[1][1]:
        return DEFECT
    elif c_response$[1][1]:
        return COOPERATE
    else:
        return DEFECT
lookahead_or_tft_bot = pd_bot(lookahead_or_tft) + tit_for_tat_bot
punish_or_lookahead_bot = pd_bot(punisher) + lookahead_or_tft_bot

def simulate(self_bot, self_hist, opp_hist, opp_bot, ply=1):
    if ply == 0:
        return DEFER
    else:
        c_simulation, d_simulation = winnings(self_bot, self_hist, opp_hist, opp_bot)
        c_scores = c_simulation$[ply-1]
        d_scores = d_simulation$[ply-1]
        return decide(c_scores, d_scores)

def simulate_or_tft(self_hist, opp_hist, opp_bot):
    return simulate(tit_for_tat_bot, self_hist, opp_hist, opp_bot, 3)
simulate_or_tft_bot = pd_bot(simulate_or_tft) + tit_for_tat_bot

def simulate_or_mirror(self_hist, opp_hist, opp_bot):
    return simulate(mirror_or_tft_bot, self_hist, opp_hist, opp_bot, 3)
simulate_or_mirror_bot = pd_bot(simulate_or_mirror) + mirror_or_tft_bot

def simulate_or_punish(self_hist, opp_hist, opp_bot):
    return simulate(punisher_bot, self_hist, opp_hist, opp_bot, 3)
simulate_or_punish_bot = pd_bot(simulate_or_punish) + punisher_bot

def simulate_or_punish_or_mirror(self_hist, opp_hist, opp_bot):
    return simulate(punish_or_mirror_bot, self_hist, opp_hist, opp_bot, 3)
simulate_or_punish_or_mirror_bot = pd_bot(simulate_or_punish_or_mirror) + punish_or_mirror_bot

def piecewise_mirror(self_hist, opp_hist, opp_bot):
    if opp_hist and not opp_hist[-1]:
        return DEFECT
    else:
        return mirror(piecewise_mirror_bot, self_hist, opp_hist, opp_bot)
piecewise_mirror_bot = pd_bot(piecewise_mirror) + punisher_bot
piecewise_simulate_bot = pd_bot(piecewise_mirror) + simulate_or_punish_or_mirror_bot
