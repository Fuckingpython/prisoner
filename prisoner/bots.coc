from . import dilemma
import random

cooperate(opp_hist=None, self_hist=None, opp_bot=None) = True
cooperate_bot = (cooperate,)

defect(opp_hist=None, self_hist=None, opp_bot=None) = False
defect_bot = (defect,)

def coin_flip(opp_hist=None, self_hist=None, opp_bot=None):
    return bool(random.getrandbits(1))
coin_flip_bot = (coin_flip,)

def tit_for_tat(opp_hist, self_hist=None, opp_bot=None):
    if opp_hist:
        return opp_hist[-1]
    else:
        return None
tit_for_tat_bot = (tit_for_tat,) + cooperate_bot

def nice_tft(opp_hist, self_hist=None, opp_bot=None):
    if not opp_hist or opp_hist[-1] or random.random() < .05:
        return cooperate()
    else:
        return defect()
nice_tft_bot = (nice_tft,)

def punisher(opp_hist, self_hist=None, opp_bot=None):
    if opp_hist and not reduce((and), opp_hist):
        return defect()
    else:
        return None
punisher_bot = (punisher,) + cooperate_bot

def switcher(opp_hist, self_hist, opp_bot=None):
    if not opp_hist or not self_hist:
        return None
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()
mean_switcher_bot = (switcher,)
nice_switcher_bot = mean_switcher_bot + cooperate_bot

def exploiter(opp_hist, self_hist, opp_bot):
    if dilemma.predict(defect_bot, self_hist, opp_bot, opp_hist, False):
        return defect()
    elif not dilemma.predict(cooperate_bot, self_hist, opp_bot, opp_hist, True):
        return defect()
    else:
        return None
exploit_or_tft_bot = (exploiter,) + tit_for_tat_bot
exploit_or_switch_bot = (exploiter,) + nice_switcher_bot
exploit_or_punish_bot = (exploiter,) + punisher_bot

def justice_mirror(opp_hist, self_hist, opp_bot):
    return dilemma.call(opp_bot, opp_hist, cooperate_bot, self_hist)
justice_mirror_bot = (justice_mirror,)

def mirror_or_tft(opp_hist, self_hist, opp_bot):
    return dilemma.call(opp_bot, opp_hist, mirror_or_tft_bot, self_hist)
mirror_or_tft_bot = (mirror_or_tft,) + tit_for_tat_bot

def tft_or_mirror(opp_hist, self_hist, opp_bot):
    return dilemma.call(opp_bot, opp_hist, tft_or_mirror_bot, self_hist)
tft_or_mirror_bot = (tit_for_tat,) + (tft_or_mirror,) + cooperate_bot

def switch_or_mirror(opp_hist, self_hist, opp_bot):
    return dilemma.call(opp_bot, opp_hist, switch_or_mirror_bot, self_hist)
switch_or_mirror_bot = (switcher,) + (switch_or_mirror,) + cooperate_bot

def predict_or_tft(opp_hist, self_hist, opp_bot):
    c_response, d_response = dilemma.predict(predict_or_tft_bot, self_hist, opp_bot, opp_hist)
    if d_response:
        return defect()
    elif c_response:
        return cooperate()
    else:
        return defect()
predict_or_tft_bot = (predict_or_tft,) + tit_for_tat_bot

def simulate_or_tft(opp_hist, self_hist, opp_bot):
    c_simulation, d_simulation = dilemma.winnings(tit_for_tat_bot, self_hist, opp_bot, opp_hist, 3)
    if c_simulation[0] > d_simulation[0]:
        return cooperate()
    elif d_simulation[0] > c_simulation[0]:
        return defect()
    elif c_simulation[1] < d_simulation[1]:
        return cooperate()
    elif d_simulation[1] < c_simulation[1]:
        return defect()
    else:
        return None
simulate_or_tft_bot = (simulate_or_tft,) + tit_for_tat_bot
