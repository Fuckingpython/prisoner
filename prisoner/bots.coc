from . import dilemma
import random

cooperate(opp_hist=None, self_hist=None, opp_bot=None) = True
cooperate_bot = (cooperate,)

defect(opp_hist=None, self_hist=None, opp_bot=None) = False
defect_bot = (defect,)

def coin_flip(opp_hist=None, self_hist=None, opp_bot=None):
    return bool(random.getrandbits(1))
coin_flip_bot = (coin_flip,)

def tit_for_tat(opp_hist, self_hist=None, opp_bot=None):
    if not opp_hist:
        return cooperate()
    else:
        return opp_hist[-1]
tit_for_tat_bot = (tit_for_tat,)

def nice_tft(opp_hist, self_hist=None, opp_bot=None):
    if not opp_hist or opp_hist[-1] or random.random() < .01:
        return cooperate()
    else:
        return defect()
nice_tft_bot = (nice_tft,)

def punisher(opp_hist, self_hist=None, opp_bot=None):
    if not opp_hist:
        return cooperate()
    else:
        return reduce((and), opp_hist)
punisher_bot = (punisher,)

def nice_switcher(opp_hist, self_hist, opp_bot=None):
    if not opp_hist or not self_hist:
        return cooperate()
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()
nice_switcher_bot = (nice_switcher,)

def mean_switcher(opp_hist, self_hist, opp_bot=None):
    if not opp_hist or not self_hist:
        return defect()
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()
mean_switcher_bot = (mean_switcher,)

def justice_mirror(opp_hist, self_hist, opp_bot):
    return dilemma.call(opp_bot, opp_hist, cooperate, self_hist)
justice_mirror_bot = (justice_mirror,)

def true_mirror(opp_hist, self_hist, opp_bot):
    return dilemma.call(opp_bot, opp_hist, true_mirror, self_hist)
true_mirror_bot = (true_mirror,)
mirror_or_tft_bot = true_mirror_bot + tit_for_tat_bot

def predictor(opp_hist, self_hist, opp_bot):
    c_response, d_response = dilemma.predict(opp_bot, opp_hist, predictor, self_hist)
    if d_response:
        return defect()
    elif c_response:
        return cooperate()
    else:
        return defect()
predictor_bot = (predictor,)
predict_or_tft_bot = predictor_bot + tit_for_tat_bot

def simulator(opp_hist, self_hist, opp_bot):
    c_simulation, d_simulation = dilemma.simulate(1, opp_bot, opp_hist, simulator, self_hist)
    return c_simulation[0] >= d_simulation[0]
simulator_bot = (simulator,)
simulate_or_tft_bot = simulator_bot + tit_for_tat_bot
