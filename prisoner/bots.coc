from . import dilemma
import random

cooperate(opp_hist=None, self_hist=None, opp_func=None) = True
defect(opp_hist=None, self_hist=None, opp_func=None) = False

def coin_flip(opp_hist=None, self_hist=None, opp_func=None):
    return bool(random.getrandbits(1))

def tit_for_tat(opp_hist, self_hist=None, opp_func=None):
    if not opp_hist:
        return cooperate()
    else:
        return opp_hist[-1]

def nice_tft(opp_hist, self_hist=None, opp_func=None):
    if not opp_hist or opp_hist[-1] or random.random() < .01:
        return cooperate()
    else:
        return defect()

def punisher(opp_hist, self_hist=None, opp_func=None):
    if not opp_hist:
        return cooperate()
    else:
        return reduce((and), opp_hist)

def nice_switcher(opp_hist, self_hist, opp_func=None):
    if not opp_hist or not self_hist:
        return cooperate()
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()

def mean_switcher(opp_hist, self_hist, opp_func=None):
    if not opp_hist or not self_hist:
        return defect()
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()

def justice_mirror(opp_hist, self_hist, opp_func):
    return opp_func(opp_hist, self_hist, cooperate)

def mirror_or_tft(opp_hist, self_hist, opp_func):
    return dilemma.time_limit(()->opp_func(opp_hist, self_hist, mirror_or_tft), ()->tit_for_tat(opp_hist, self_hist, opp_func))

def predict_or_tft(opp_hist, self_hist, opp_func):
    try:
        c_response, d_response = dilemma.time_limit(()->dilemma.predict(predict_or_tft, opp_hist, self_hist, opp_func))
        if d_response:
            return defect()
        elif c_response:
            return cooperate()
        else:
            return defect()
    except dilemma.TimeOut:
        return tit_for_tat(opp_hist, self_hist, opp_func)

def simulate_or_tft(opp_hist, self_hist, opp_func):
    try:
        c_simulation, d_simulation = dilemma.time_limit(()->dilemma.simulate(1, tit_for_tat, opp_hist, self_hist, opp_func))
        return c_simulation[0] >= d_simulation[0]
    except dilemma.TimeOut:
        return tit_for_tat(opp_hist, self_hist, opp_func)
