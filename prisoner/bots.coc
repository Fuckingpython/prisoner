# IMPORTS:

from . import dilemma
import random

# BOTS:

cooperate(opp_hist=None, self_hist=None, opp_bot=None) = True
cooperate_bot = pd_bot(cooperate)

defect(opp_hist=None, self_hist=None, opp_bot=None) = False
defect_bot = pd_bot(defect)

def coin_flip(opp_hist=None, self_hist=None, opp_bot=None):
    return random.getrandbits(1) |> bool
coin_flip_bot = pd_bot(coin_flip)

def tit_for_tat(opp_hist, self_hist=None, opp_bot=None):
    if opp_hist:
        return opp_hist[-1]
    else:
        return None
tit_for_tat_bot = pd_bot(tit_for_tat) + cooperate_bot

def nice_tft(opp_hist, self_hist=None, opp_bot=None):
    if not opp_hist or opp_hist[-1] or random.random() < .05:
        return cooperate()
    else:
        return defect()
nice_tft_bot = pd_bot(nice_tft)

def delayed_tft(opp_hist, self_hist=None, opp_bot=None):
    if opp_hist:
        return random.choice(opp_hist)
    else:
        return None
delayed_tft_bot = pd_bot(delayed_tft) + cooperate_bot

def punisher(opp_hist, self_hist=None, opp_bot=None):
    if opp_hist and not all(opp_hist):
        return defect()
    else:
        return None
punisher_bot = pd_bot(punisher) + cooperate_bot

def switcher(opp_hist, self_hist, opp_bot=None):
    if not opp_hist or not self_hist:
        return None
    elif self_hist[-1] == opp_hist[-1]:
        return cooperate()
    else:
        return defect()
mean_switcher_bot = pd_bot(switcher)
nice_switcher_bot = mean_switcher_bot + cooperate_bot

def exploiter(opp_hist, self_hist, opp_bot):
    if dilemma.simulate(defect_bot, self_hist, opp_bot, opp_hist, False)$[1][1]:
        return defect()
    elif not dilemma.simulate(cooperate_bot, self_hist, opp_bot, opp_hist, True)$[1][1]:
        return defect()
    else:
        return None
exploit_or_tft_bot = (exploiter,) + tit_for_tat_bot
exploit_or_switch_bot = (exploiter,) + nice_switcher_bot
exploit_or_punish_bot = (exploiter,) + punisher_bot
exploit_or_nice_tft_bot = (exploiter,) + nice_tft_bot
exploit_or_delayed_tft_bot = (exploiter,) + delayed_tft_bot

def mirror(self_bot, opp_hist, self_hist, opp_bot):
    return opp_bot(opp_hist, self_hist, self_bot)

justice_mirror = mirror$(cooperate_bot)
justice_mirror_bot = pd_bot(justice_mirror)

def mirror_or_tft(opp_hist, self_hist, opp_bot):
    return mirror(mirror_or_tft_bot, opp_hist, self_hist, opp_bot)
mirror_or_tft_bot = pd_bot(mirror_or_tft) + tit_for_tat_bot
exploit_or_mirror_bot = pd_bot(exploiter) + mirror_or_tft_bot

def tft_or_mirror(opp_hist, self_hist, opp_bot):
    return mirror(tft_or_mirror_bot, opp_hist, self_hist, opp_bot)
tft_or_mirror_bot = pd_bot(tit_for_tat) + pd_bot(tft_or_mirror) + cooperate_bot

def switch_or_mirror(opp_hist, self_hist, opp_bot):
    return mirror(switch_or_mirror_bot, opp_hist, self_hist, opp_bot)
switch_or_mirror_bot = pd_bot(switcher) + pd_bot(switch_or_mirror) + cooperate_bot

def punish_or_mirror(opp_hist, self_hist, opp_bot):
    return mirror(punish_or_mirror_bot, opp_hist, self_hist, opp_bot)
punish_or_mirror_bot = pd_bot(punisher) + pd_bot(punish_or_mirror) + cooperate_bot

def nice_tft_or_mirror(opp_hist, self_hist, opp_bot):
    return mirror(nice_tft_or_mirror_bot, opp_hist, self_hist, opp_bot)
nice_tft_or_mirror_bot = pd_bot(nice_tft) + pd_bot(nice_tft_or_mirror) + cooperate_bot

def delayed_tft_or_mirror(opp_hist, self_hist, opp_bot):
    return mirror(delayed_tft_or_mirror_bot, opp_hist, self_hist, opp_bot)
delayed_tft_or_mirror_bot = pd_bot(delayed_tft) + pd_bot(delayed_tft_or_mirror) + cooperate_bot

def lookahead_or_tft(opp_hist, self_hist, opp_bot):
    c_response, d_response = dilemma.simulate(lookahead_or_tft_bot, self_hist, opp_bot, opp_hist)
    if d_response$[1]:
        return defect()
    elif c_response$[1]:
        return cooperate()
    else:
        return defect()
lookahead_or_tft_bot = pd_bot(lookahead_or_tft) + tit_for_tat_bot

def simulate_or_tft(opp_hist, self_hist, opp_bot):
    c_simulation, d_simulation = dilemma.winnings(tft_or_mirror_bot, self_hist, opp_bot, opp_hist)
    c_scores = c_simulation$[3]
    d_scores = d_simulation$[3]
    return dilemma.decide(c_scores, d_scores)
simulate_or_tft_bot = pd_bot(simulate_or_tft) + tft_or_mirror_bot

def simulate_or_mirror(opp_hist, self_hist, opp_bot):
    c_simulation, d_simulation = dilemma.winnings(mirror_or_tft_bot, self_hist, opp_bot, opp_hist)
    c_scores = c_simulation$[3]
    d_scores = d_simulation$[3]
    return dilemma.decide(c_scores, d_scores)
simulate_or_mirror_bot = pd_bot(simulate_or_mirror) + mirror_or_tft_bot
